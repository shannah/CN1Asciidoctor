package com.codename1.demos.asciidoctor;


import com.codename1.asciidoctor.Asciidoctor;
import com.codename1.asciidoctor.Asciidoctor.ConvertOptions;
import com.codename1.components.SplitPane;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.BrowserComponent;
import com.codename1.ui.Button;
import com.codename1.ui.TextArea;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class AsciidoctorDemo {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        new AsciidocEditorForm().show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    
    public class AsciidocEditorForm extends Form {
        BrowserComponent preview = new BrowserComponent();
        TextArea editor = new TextArea();
        {
            editor.setMaxSize(999999);
        }
        Button updatePreview = new Button("Update Preview");
        Asciidoctor doctor = new Asciidoctor();
                
        SplitPane splitPane = new SplitPane(SplitPane.HORIZONTAL_SPLIT, editor, preview, "0", "50%", "100%");
        
        Timer updateTimer;
        
        AsciidocEditorForm() {
            super("Asciidoc Demo");
            setLayout(new BorderLayout());
            add(BorderLayout.NORTH, FlowLayout.encloseRight(updatePreview) );
            add(BorderLayout.CENTER, splitPane);
            updatePreview.addActionListener(e->{
                updatePreview();
            });
        }

        String css;
        private String getCSS() {
            if (css == null) {
                try {
                    css = doctor.getCSS();
                } catch (IOException ex) {
                    Log.e(ex);
                }
            }
            return css;
        }
        
        private void updatePreview() {
             doctor.toHtml(editor.getText(), new ConvertOptions().headerFooter(true)).ready(html->{
                System.out.println("We got "+html);
                
                html = "<!doctype html><html><head><style type='text/css'>"+getCSS()+"</style></head><body>"+html+"</body></html>";
                preview.setPage(html, null);
               
            }).except(ex->{
                Log.e(ex);
            });
        }
        
        @Override
        protected void initComponent() {
            super.initComponent();
            
            if (updateTimer == null) {
                updateTimer = new Timer();
                updateTimer.schedule(new TimerTask() {
                    String lastText;
                    @Override
                    public void run() {
                        if (!Objects.equals(lastText, editor.getText())) {
                            callSerially(()->{
                                lastText = editor.getText();
                                updatePreview();
                            });
                        }
                    }
                    
                }, 1000, 1000);
            }
        }

        @Override
        protected void deinitialize() {
            if (updateTimer != null) {
                updateTimer.cancel();
                updateTimer = null;
            }
            super.deinitialize();
        }
        
        
        
        
    }

}
